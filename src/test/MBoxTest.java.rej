diff a/src/test/MBoxTest.java b/src/test/MBoxTest.java	(rejected hunks)
@@ -89,36 +89,74 @@
 		box19 = new MBox(BOX_LENGTH);
 		box20 = new MBox(BOX_LENGTH);
 
-		  rect_400_400 = new MRectangle(400, 400, BOX_LENGTH);
-		  rect_400_200 = new MRectangle(400, 200, BOX_LENGTH);
-		  rect_200_400 = rect_400_200.clone().rotate();
-		  rect_400_100 = new MRectangle(400, 100, BOX_LENGTH);
-		  rect_100_400 = rect_400_100.clone().rotate();
-		  rect_50_400 = new MRectangle(50, 400, BOX_LENGTH);
-		  rect_400_50 = rect_50_400.clone().rotate();
+		rect_400_400 = new MRectangle(400, 400, BOX_LENGTH);
+		rect_400_200 = new MRectangle(400, 200, BOX_LENGTH);
+		rect_200_400 = rect_400_200.clone().rotate();
+		rect_400_100 = new MRectangle(400, 100, BOX_LENGTH);
+		rect_100_400 = rect_400_100.clone().rotate();
+		rect_50_400 = new MRectangle(50, 400, BOX_LENGTH);
+		rect_400_50 = rect_50_400.clone().rotate();
+
+		rect_300_300 = new MRectangle(300, 300, BOX_LENGTH);
+		rect_300_200 = new MRectangle(300, 200, BOX_LENGTH);
+		rect_200_300 = rect_300_200.clone().rotate();
+		rect_300_100 = new MRectangle(300, 100, BOX_LENGTH);
+		rect_100_300 = rect_300_100.clone().rotate();
+		rect_300_50 = new MRectangle(300, 50, BOX_LENGTH);
+		rect_50_300 = rect_300_50.clone().rotate();
+
+		rect_200_200 = new MRectangle(200, 200, BOX_LENGTH);
+		rect_200_100 = new MRectangle(200, 100, BOX_LENGTH);
+		rect_100_200 = rect_200_100.clone().rotate();
+		rect_200_50 = new MRectangle(200, 50, BOX_LENGTH);
+		rect_50_200 = rect_200_50.clone().rotate();
+		rect_200_25 = new MRectangle(200, 25, BOX_LENGTH);
+		rect_25_200 = rect_200_25.clone().rotate();
+
+		rect_100_100 = new MRectangle(100, 100, BOX_LENGTH);
+		rect_100_50 = new MRectangle(100, 50, BOX_LENGTH);
+		rect_50_100 = rect_100_50.clone().rotate();
+		rect_100_25 = new MRectangle(100, 25, BOX_LENGTH);
+		rect_25_100 = rect_100_25.clone().rotate();
+		
+		
+		
+		
+		
+		// Case 1a: Box is full & contains 1 rectangle
+		box1.insert(rect_400_400, 0, 0, false);
 
-		  rect_300_300 = new MRectangle(300, 300, BOX_LENGTH);
-		  rect_300_200 = new MRectangle(300, 200, BOX_LENGTH);
-		  rect_200_300 = rect_300_200.clone().rotate();
-		  rect_300_100 = new MRectangle(300, 100, BOX_LENGTH);
-		  rect_100_300 = rect_300_100.clone().rotate();
-		  rect_300_50 = new MRectangle(300, 50, BOX_LENGTH);
-		  rect_50_300 = rect_300_50.clone().rotate();
+		// Case 1b: Box is full & contains 2 rectangles
+		box2.insert(rect_400_200, 0, 0, false);
+		box2.insert(rect_400_200, 0, 200, false);
+		
+		// Case 1c: Box is not full but not enough space
+
+		// From East
+		
+		// Case 2a: succeeds immediately w/o push
+		
+		// Case 2a': succeeds immediately with push
 		
-		  rect_200_200 = new MRectangle(200, 200, BOX_LENGTH);
-		  rect_200_100 = new MRectangle(200, 100, BOX_LENGTH);
-		  rect_100_200 = rect_200_100.clone().rotate();
-		  rect_200_50 = new MRectangle(200, 50, BOX_LENGTH);
-		  rect_50_200 = rect_200_50.clone().rotate();
-		  rect_200_25 = new MRectangle(200, 25, BOX_LENGTH);
-		  rect_25_200 = rect_200_25.clone().rotate();
+		// Case 2b: succeeds after moving w/o push
 		
-		  rect_100_100 = new MRectangle(100, 100, BOX_LENGTH);
-		  rect_100_50 = new MRectangle(100, 50, BOX_LENGTH);
-		  rect_50_100 = rect_100_50.clone().rotate();
-		  rect_100_25 = new MRectangle(100, 25, BOX_LENGTH);
-		  rect_25_100 = rect_100_25.clone().rotate();
+		// Case 2b': succeeds after moving with push
+		
+		// Case 2b_rand: succeeds at last step w/o push
+		
+		// Case 2b'_rand: succeeds at last step with push
 
+		// Case r2a
+		
+		// Case r2a'
+
+		// Case r2b
+		
+		// Case r2b'
+		
+		// Case r2b_rand
+		
+		// Case r2b'_rand
 		
 		
 		
